from tkinter import Tk, Toplevel, StringVar, CENTER, PhotoImage, Label as TkLabel
from tkinter import messagebox
import os  # ƒê·∫£m b·∫£o ch·ªâ c√≥ 1 d√≤ng import os ·ªü ƒë·∫ßu file, KH√îNG import os trong b·∫•t k·ª≥ h√†m n√†o b√™n d∆∞·ªõi
import requests
import threading
from models import GameManager, UserManager
from views import MainView
from tkinter.ttk import Frame, Label, Button, Entry, Style
import io
from PIL import Image, ImageDraw, ImageTk
import tkinter as tk
import datetime
import json

# --- app_controller.py ---


class GameApp:
    def __init__(self, user, root, on_logout=None):
        self.user = user
        self.root = root
        self.on_logout = on_logout
        self.root.title("·ª®ng d·ª•ng qu·∫£n l√Ω game c√° nh√¢n")
        self.manager = GameManager(username=self.user.username)
        self.api = GiantBombClient()
        self.is_admin = self.user.role == "admin"
        self.view = MainView(self.root, self.manager, self.user, api_client=self.api, is_admin=self.is_admin, on_logout=self.logout, admin_manage_users_callback=self.admin_manage_users if self.is_admin else None)

    def logout(self):
        if messagebox.askyesno("ƒêƒÉng xu·∫•t", "B·∫°n c√≥ ch·∫Øc ch·∫Øn mu·ªën ƒëƒÉng xu·∫•t?"):
            self.root.withdraw()
            if self.on_logout:
                self.on_logout()

    def run(self):
        # Ch·ªâ deiconify, kh√¥ng g·ªçi mainloop ·ªü ƒë√¢y
        self.root.deiconify()

    def admin_manage_users(self):
        dialog = Toplevel(self.root)
        dialog.title("Qu·∫£n l√Ω t√†i kho·∫£n")
        dialog.configure(bg="#23272f")
        self._center_dialog(dialog, 600, 420)
        dialog.grab_set()
        dialog.focus_force()
        style = Style(dialog)
        style.theme_use('clam')
        style.configure("Card.TFrame", background="#23272f")
        style.configure("Card.TLabel", background="#23272f", foreground="#e0e6f0", font=("Segoe UI", 12, "bold"))
        style.configure("Accent.TButton", background="#2e8fff", foreground="#fff", font=("Segoe UI", 11, "bold"), borderwidth=0)
        style.map("Accent.TButton", background=[('active', '#1e6fdc')])

        frm = Frame(dialog, style="Card.TFrame")
        frm.pack(fill='both', expand=True, padx=20, pady=20)

        Label(frm, text="Danh s√°ch t√†i kho·∫£n", style="Card.TLabel").pack(anchor='w', pady=(0, 8))
        user_manager = UserManager()
        current_username = self.user.username
        users = [u for u in user_manager.users if u.username != "123"]
        from tkinter import Listbox, END, SINGLE
        lb = Listbox(frm, selectmode=SINGLE, font=("Segoe UI", 11), bg="#23262e", fg="#e0e6f0", width=32)
        for u in users:
            lb.insert(END, f"{u.username} - {'Admin' if u.role == 'admin' else 'User'}")
        lb.pack(fill='x', pady=(0, 8))

        def set_role_admin():
            sel = lb.curselection()
            if not sel:
                messagebox.showwarning("Ch∆∞a ch·ªçn", "Ch·ªçn t√†i kho·∫£n ƒë·ªÉ n√¢ng quy·ªÅn")
                return
            idx = sel[0]
            user = users[idx]
            if user.username == "123":
                messagebox.showwarning("Kh√¥ng th·ªÉ thay ƒë·ªïi", "Kh√¥ng th·ªÉ thay ƒë·ªïi quy·ªÅn admin g·ªëc!")
                return
            if user.username == current_username:
                messagebox.showwarning("Kh√¥ng th·ªÉ thao t√°c", "Kh√¥ng th·ªÉ thao t√°c tr√™n ch√≠nh t√†i kho·∫£n c·ªßa b·∫°n!")
                return
            user.role = "admin"
            user_manager._save()
            lb.delete(idx)
            lb.insert(idx, f"{user.username} - Admin")
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ n√¢ng {user.username} th√†nh admin")

        def set_role_user():
            sel = lb.curselection()
            if not sel:
                messagebox.showwarning("Ch∆∞a ch·ªçn", "Ch·ªçn t√†i kho·∫£n ƒë·ªÉ h·∫° quy·ªÅn")
                return
            idx = sel[0]
            user = users[idx]
            if user.username == "123":
                messagebox.showwarning("Kh√¥ng th·ªÉ thay ƒë·ªïi", "Kh√¥ng th·ªÉ thay ƒë·ªïi quy·ªÅn admin g·ªëc!")
                return
            if user.username == current_username:
                messagebox.showwarning("Kh√¥ng th·ªÉ thao t√°c", "Kh√¥ng th·ªÉ thao t√°c tr√™n ch√≠nh t√†i kho·∫£n c·ªßa b·∫°n!")
                return
            user.role = "user"
            user_manager._save()
            lb.delete(idx)
            lb.insert(idx, f"{user.username} - User")
            messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ h·∫° quy·ªÅn {user.username} th√†nh user")

        def delete_user():
            sel = lb.curselection()
            if not sel:
                messagebox.showwarning("Ch∆∞a ch·ªçn", "Ch·ªçn t√†i kho·∫£n ƒë·ªÉ x√≥a")
                return
            idx = sel[0]
            user = users[idx]
            if user.username == "123":
                messagebox.showwarning("Kh√¥ng th·ªÉ x√≥a", "Kh√¥ng th·ªÉ x√≥a t√†i kho·∫£n admin g·ªëc!")
                return
            if user.username == current_username:
                messagebox.showwarning("Kh√¥ng th·ªÉ thao t√°c", "Kh√¥ng th·ªÉ thao t√°c tr√™n ch√≠nh t√†i kho·∫£n c·ªßa b·∫°n!")
                return
            if messagebox.askyesno("X√°c nh·∫≠n", f"B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a t√†i kho·∫£n {user.username}?\nT·∫•t c·∫£ d·ªØ li·ªáu li√™n quan s·∫Ω b·ªã x√≥a vƒ©nh vi·ªÖn!"):
                # X√≥a user kh·ªèi danh s√°ch v√† file
                del users[idx]
                user_manager.users = [u for u in user_manager.users if u.username != user.username]
                user_manager._save()
                lb.delete(idx)
                # X√ìA TO√ÄN B·ªò D·ªÆ LI·ªÜU GAME, JSON LI√äN QUAN ƒê·∫æN USER
                try:
                    game_json = os.path.join(os.path.dirname(__file__), "data", f"games_{user.username}.json")
                    if os.path.exists(game_json):
                        os.remove(game_json)
                except Exception:
                    pass
                # N·∫øu c√≥ th·ªÉ c√≥ c√°c file kh√°c li√™n quan user, x√≥a th√™m ·ªü ƒë√¢y
                messagebox.showinfo("Th√†nh c√¥ng", f"ƒê√£ x√≥a t√†i kho·∫£n {user.username} v√† to√†n b·ªô d·ªØ li·ªáu li√™n quan.")

        btn_frame = Frame(frm, style="Card.TFrame")
        btn_frame.pack(pady=8)
        Button(btn_frame, text="N√¢ng quy·ªÅn Admin", style="Accent.TButton", command=set_role_admin).pack(side="left", padx=5)
        Button(btn_frame, text="H·∫° quy·ªÅn User", style="Accent.TButton", command=set_role_user).pack(side="left", padx=5)
        Button(btn_frame, text="X√≥a t√†i kho·∫£n", style="Accent.TButton", command=delete_user).pack(side="left", padx=5)
        Button(btn_frame, text="ƒê√≥ng", style="Accent.TButton", command=dialog.destroy).pack(side="left", padx=5)

        dialog.wait_window()

    def _center_dialog(self, dialog, width=480, height=320):
        dialog.update_idletasks()
        screen_width = dialog.winfo_screenwidth()
        screen_height = dialog.winfo_screenheight()
        x = (screen_width // 2) - (width // 2)
        y = (screen_height // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")

    def _show_mode_dialog(self, parent):
        dialog_width = 540
        dialog_height = 420
        dialog = tk.Toplevel(parent)
        dialog.withdraw()
        self._set_dialog_appearance(dialog, width=dialog_width, height=dialog_height, title="Ch√†o m·ª´ng!")
        dialog.configure(bg="#23272f")
        # Cho ph√©p thu nh·ªè (minimize) v√† gi·ªØ n√∫t minimize tr√™n titlebar
        dialog.resizable(False, False)
        dialog.transient(parent)
        dialog.focus_force()
        dialog.lift()
        dialog.grab_set()
        # ƒê·∫£m b·∫£o c·ª≠a s·ªï c√≥ n√∫t minimize tr√™n m·ªçi Windows
        try:
            dialog.overrideredirect(False)
        except Exception:
            pass

        frm = tk.Frame(dialog, bg="#23272f")
        frm.place(relx=0.5, rely=0.5, anchor='center', width=dialog_width-40, height=dialog_height-40)

        # Logo + t√™n app + ch√†o m·ª´ng (CƒÇN GI·ªÆA)
        try:
            logo_path = os.path.join(os.path.dirname(__file__), "data", "icon.png")
            logo_img = Image.open(logo_path).resize((48, 48))
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frm, image=logo_photo, bg="#23272f")
            logo_label.image = logo_photo
            logo_label.pack(pady=(24, 8))
        except Exception:
            tk.Label(frm, text="üéÆ", font=("Segoe UI", 32), bg="#23272f", fg="#fff").pack(pady=(24, 8))
        tk.Label(frm, text="GAME COLLECTION", font=("Segoe UI", 16, "bold"), bg="#23272f", fg="#fff", anchor="center", justify="center").pack(pady=(0, 4), fill='x')
        tk.Label(
            frm,
            text="Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng qu·∫£n l√Ω game c√° nh√¢n!",
            font=("Segoe UI", 11),
            bg="#23272f",
            fg="#b0b6c2",
            anchor="center",
            justify="center"
        ).pack(pady=(2, 18), fill='x')

        # N√∫t ch·ªçn ch·∫ø ƒë·ªô (CƒÇN GI·ªÆA)
        btn_style = {"font": ("Segoe UI", 12, "bold"), "bg": "#2196f3", "fg": "#fff", "activebackground": "#1976d2", "activeforeground": "#fff", "bd": 0, "relief": "flat", "cursor": "hand2", "height": 1}
        def make_btn(text, command):
            btn = tk.Button(frm, text=text, command=command, **btn_style)
            btn.pack(fill='x', padx=64, pady=7, ipady=4)
            btn.bind("<Enter>", lambda e: btn.config(bg="#1976d2"))
            btn.bind("<Leave>", lambda e: btn.config(bg="#2196f3"))
            return btn

        result = {"mode": None}
        def set_mode_and_close(m):
            result["mode"] = m
            dialog.destroy()

        make_btn("ƒêƒÉng nh·∫≠p", lambda: set_mode_and_close("login"))
        make_btn("ƒêƒÉng k√Ω", lambda: set_mode_and_close("register"))
        tk.Button(frm, text="Tho√°t", command=lambda: set_mode_and_close("quit"),
                  font=("Segoe UI", 11, "bold"), bg="#bdbdbd", fg="#222", activebackground="#888", activeforeground="#fff",
                  bd=0, relief="flat", cursor="hand2", height=1).pack(fill='x', padx=64, pady=(7, 16), ipady=4)

        def close():
            result["mode"] = None
            dialog.destroy()
        dialog.protocol("WM_DELETE_WINDOW", close)
        dialog.deiconify()
        dialog.lift()
        dialog.grab_set()
        dialog.focus_force()
        dialog.wait_window()
        return result["mode"]

    def _show_login_dialog(self, parent):
        dialog_width = 540
        dialog_height = 520
        dialog = tk.Toplevel(parent)
        dialog.withdraw()
        self._set_dialog_appearance(dialog, width=dialog_width, height=dialog_height, title="ƒêƒÉng nh·∫≠p")
        dialog.configure(bg="#23272f")
        dialog.resizable(False, False)
        dialog.transient(parent)
        dialog.focus_force()
        dialog.lift()
        dialog.grab_set()
        try:
            dialog.overrideredirect(False)
        except Exception:
            pass
        frm = tk.Frame(dialog, bg="#23272f")
        frm.place(relx=0.5, rely=0.5, anchor='center', width=dialog_width-40, height=dialog_height-40)

        # Logo + ti√™u ƒë·ªÅ (CƒÇN GI·ªÆA)
        try:
            logo_path = os.path.join(os.path.dirname(__file__), "data", "icon.png")
            logo_img = Image.open(logo_path).resize((48, 48))
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frm, image=logo_photo, bg="#23272f")
            logo_label.image = logo_photo
            logo_label.pack(pady=(24, 8))
        except Exception:
            tk.Label(frm, text="üéÆ", font=("Segoe UI", 32), bg="#23272f", fg="#fff").pack(pady=(24, 8))
        tk.Label(frm, text="ƒêƒÇNG NH·∫¨P", font=("Segoe UI", 15, "bold"), bg="#23272f", fg="#fff").pack(pady=(0, 2), fill='x')
        tk.Label(frm, text="ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n c·ªßa b·∫°n", font=("Segoe UI", 10), bg="#23272f", fg="#b0b6c2").pack(pady=(2, 18), fill='x')

        # Form (CƒÇN GI·ªÆA)
        tk.Label(frm, text="T√äN ƒêƒÇNG NH·∫¨P", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        username_var = tk.StringVar()
        username_entry = tk.Entry(frm, textvariable=username_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        username_entry.pack(fill='x', padx=64, pady=(0, 12), ipady=6)

        tk.Label(frm, text="M·∫¨T KH·∫®U", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        password_var = tk.StringVar()
        password_entry = tk.Entry(frm, textvariable=password_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", show="*", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        password_entry.pack(fill='x', padx=64, pady=(0, 6), ipady=6)

        # Hi·ªán/·∫©n m·∫≠t kh·∫©u & Ghi nh·ªõ t√¥i (cƒÉn ƒë·ªÅu nhau)
        checkbox_frame = tk.Frame(frm, bg="#23272f")
        checkbox_frame.pack(fill='x', padx=64, pady=(0, 8))
        show_pw_var = tk.BooleanVar(value=False)
        def toggle_pw():
            password_entry.config(show="" if show_pw_var.get() else "*")
        show_pw_cb = tk.Checkbutton(checkbox_frame, text="Hi·ªán m·∫≠t kh·∫©u", variable=show_pw_var, command=toggle_pw, bg="#23272f", fg="#b0b6c2", activebackground="#23272f", activeforeground="#4f8cff", selectcolor="#23262e", font=("Segoe UI", 10))
        show_pw_cb.pack(side=tk.LEFT, expand=True, anchor='center')
        remember_var = tk.BooleanVar(value=False)
        remember_cb = tk.Checkbutton(checkbox_frame, text="Ghi nh·ªõ t√¥i", variable=remember_var, bg="#23272f", fg="#b0b6c2", activebackground="#23272f", activeforeground="#4f8cff", selectcolor="#23262e", font=("Segoe UI", 10))
        remember_cb.pack(side=tk.LEFT, expand=True, anchor='center')

        REMEMBER_FILE = os.path.join(os.path.dirname(__file__), "data", "remembered.json")

        def load_remembered():
            if os.path.exists(REMEMBER_FILE):
                try:
                    with open(REMEMBER_FILE, "r", encoding="utf-8") as f:
                        self._remembered = json.load(f)
                except Exception:
                    self._remembered = {}
            else:
                self._remembered = {}

        def save_remembered():
            try:
                with open(REMEMBER_FILE, "w", encoding="utf-8") as f:
                    json.dump(self._remembered, f, ensure_ascii=False, indent=2)
            except Exception:
                pass

        load_remembered()

        def on_username_change(*args):
            uname = username_var.get()
            if uname in self._remembered:
                password_var.set(self._remembered[uname])
                remember_var.set(True)
            else:
                password_var.set("")
                remember_var.set(False)
        username_var.trace_add("write", lambda *a: on_username_change())

        popup_ref = {"popup": None}
        def show_remembered_popup(event):
            uname = username_var.get()
            if len(uname) < 2:
                if popup_ref["popup"]:
                    popup_ref["popup"].destroy()
                    popup_ref["popup"] = None
                return
            matches = [u for u in self._remembered if uname.lower() in u.lower()]
            if not matches:
                if popup_ref["popup"]:
                    popup_ref["popup"].destroy()
                    popup_ref["popup"] = None
                return
            if popup_ref["popup"]:
                popup_ref["popup"].destroy()
            popup = tk.Toplevel(dialog)
            popup_ref["popup"] = popup
            popup.wm_overrideredirect(True)
            popup.configure(bg="#31343c")
            x = dialog.winfo_rootx() + username_entry.winfo_x()
            y = dialog.winfo_rooty() + username_entry.winfo_y() + username_entry.winfo_height()
            popup.geometry(f"220x{min(120, 28*len(matches))}+{x}+{y}")

            def fill_and_close(u):
                username_var.set(u)
                password_var.set(self._remembered[u])
                remember_var.set(True)
                popup.destroy()
                popup_ref["popup"] = None
                password_entry.focus_set()

            for i, u in enumerate(matches):
                btn = tk.Button(popup, text=u, anchor="w", font=("Segoe UI", 11), bg="#31343c", fg="#fff", bd=0, relief="flat", activebackground="#4f8cff", activeforeground="#fff", cursor="hand2", command=lambda u=u: fill_and_close(u))
                btn.pack(fill='x')
            def close_popup(event=None):
                if popup.winfo_exists():
                    popup.destroy()
                    popup_ref["popup"] = None
            popup.bind("<FocusOut>", close_popup)
        username_entry.bind("<KeyRelease>", show_remembered_popup)

        def on_remember_change(*args):
            uname = username_var.get()
            if not remember_var.get() and uname in self._remembered:
                del self._remembered[uname]
                save_remembered()
        remember_var.trace_add("write", lambda *a: on_remember_change())

        result = {"creds": None, "retry": False}
        def submit(event=None):
            self._dialog_zoomed = dialog.state() == 'zoomed'
            if remember_var.get():
                self._remembered[username_var.get()] = password_var.get()
                save_remembered()
            else:
                uname = username_var.get()
                if uname in self._remembered:
                    del self._remembered[uname]
                    save_remembered()
            result["creds"] = {'username': username_var.get(), 'password': password_var.get()}
            dialog.destroy()
        def go_back():
            self._dialog_zoomed = dialog.state() == 'zoomed'
            result["creds"] = "back"
            dialog.destroy()

        login_btn = tk.Button(
            frm, text="ƒêƒÉng nh·∫≠p",
            font=("Segoe UI", 12, "bold"),
            bg="#2196f3", fg="#fff",
            activebackground="#1976d2", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=submit
        )
        login_btn.pack(fill='x', padx=64, pady=(12, 8), ipady=4)

        # N√∫t quay l·∫°i (th√™m d∆∞·ªõi n√∫t ƒëƒÉng nh·∫≠p)
        back_btn = tk.Button(
            frm, text="Quay l·∫°i",
            font=("Segoe UI", 12, "bold"),
            bg="#23272f", fg="#b0b6c2",
            activebackground="#31343c", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=go_back,
            highlightthickness=1, highlightbackground="#bdbdbd"
        )
        back_btn.pack(fill='x', padx=64, pady=(0, 16), ipady=4)
        back_btn.update_idletasks()
        back_btn.configure(
            highlightthickness=2,
            highlightbackground="#bdbdbd",
            highlightcolor="#bdbdbd"
        )

        def close():
            result["creds"] = "back"
            dialog.destroy()
        dialog.protocol("WM_DELETE_WINDOW", close)
        username_entry.focus_set()
        username_entry.bind('<Return>', lambda e: password_entry.focus_set())
        password_entry.bind('<Return>', lambda e: submit())
        dialog.deiconify()
        dialog.lift()
        dialog.grab_set()
        dialog.focus_force()
        dialog.wait_window()
        return result.get("creds", None)

    def _show_register_dialog(self, parent):
        dialog_width = 540
        dialog_height = 570
        dialog = tk.Toplevel(parent)
        dialog.withdraw()
        self._set_dialog_appearance(dialog, width=dialog_width, height=dialog_height, title="ƒêƒÉng k√Ω t√†i kho·∫£n")
        dialog.configure(bg="#23272f")
        dialog.resizable(False, False)
        dialog.transient(parent)
        dialog.focus_force()
        dialog.lift()
        dialog.grab_set()
        try:
            dialog.overrideredirect(False)
        except Exception:
            pass
        frm = tk.Frame(dialog, bg="#23272f")
        frm.place(relx=0.5, rely=0.5, anchor='center', width=dialog_width-40, height=dialog_height-40)

        # Logo + ti√™u ƒë·ªÅ (CƒÇN GI·ªÆA)
        try:
            logo_path = os.path.join(os.path.dirname(__file__), "data", "icon.png")
            logo_img = Image.open(logo_path).resize((48, 48))
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frm, image=logo_photo, bg="#23272f")
            logo_label.image = logo_photo
            logo_label.pack(pady=(24, 8))
        except Exception:
            tk.Label(frm, text="üéÆ", font=("Segoe UI", 32), bg="#23272f", fg="#fff").pack(pady=(24, 8))
        tk.Label(frm, text="ƒêƒÇNG K√ù T√ÄI KHO·∫¢N", font=("Segoe UI", 15, "bold"), bg="#23272f", fg="#fff").pack(pady=(0, 2), fill='x')
        tk.Label(frm, text="T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω game c·ªßa b·∫°n", font=("Segoe UI", 10), bg="#23272f", fg="#b0b6c2").pack(pady=(2, 18), fill='x')

        # Form ƒëƒÉng k√Ω (CƒÇN GI·ªÆA)
        tk.Label(frm, text="T√äN ƒêƒÇNG NH·∫¨P", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        reg_username_var = StringVar()
        reg_username_entry = tk.Entry(frm, textvariable=reg_username_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        reg_username_entry.pack(fill='x', padx=64, pady=(0, 12), ipady=6)

        tk.Label(frm, text="M·∫¨T KH·∫®U", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        reg_password_var = StringVar()
        reg_password_entry = tk.Entry(frm, textvariable=reg_password_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", show="*", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        reg_password_entry.pack(fill='x', padx=64, pady=(0, 6), ipady=6)

        tk.Label(frm, text="X√ÅC NH·∫¨N M·∫¨T KH·∫®U", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        reg_confirm_password_var = StringVar()
        reg_confirm_password_entry = tk.Entry(frm, textvariable=reg_confirm_password_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", show="*", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        reg_confirm_password_entry.pack(fill='x', padx=64, pady=(0, 12), ipady=6)

        # Hi·ªán/·∫©n m·∫≠t kh·∫©u
        show_reg_pw_var = tk.BooleanVar(value=False)
        def toggle_reg_pw():
            reg_password_entry.config(show="" if show_reg_pw_var.get() else "*")
            reg_confirm_password_entry.config(show="" if show_reg_pw_var.get() else "*")
        show_reg_pw_cb = tk.Checkbutton(frm, text="Hi·ªán m·∫≠t kh·∫©u", variable=show_reg_pw_var, command=toggle_reg_pw, bg="#23272f", fg="#b0b6c2", activebackground="#23272f", activeforeground="#4f8cff", selectcolor="#23262e", font=("Segoe UI", 10))
        show_reg_pw_cb.pack(anchor='center', padx=64, pady=(0, 0))

        # N√∫t ƒëƒÉng k√Ω
        result = {"creds": None}
        def submit_reg(event=None):
            username = reg_username_var.get().strip()
            password = reg_password_var.get()
            confirm_password = reg_confirm_password_var.get()
            if not username or not password or not confirm_password:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng k√Ω.", parent=dialog)
                return
            if password != confirm_password:
                messagebox.showwarning("M·∫≠t kh·∫©u kh√¥ng kh·ªõp", "Vui l√≤ng x√°c nh·∫≠n ƒë√∫ng m·∫≠t kh·∫©u.", parent=dialog)
                return
            if len(username) < 3 or not username.isalnum():
                messagebox.showwarning("T√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá", "T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª± v√† kh√¥ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát.", parent=dialog)
                return
            if not self.user_manager.register_user(username, password, role="user"):
                messagebox.showwarning("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i", "Vui l√≤ng ch·ªçn t√™n ƒëƒÉng nh·∫≠p kh√°c.", parent=dialog)
                return
            messagebox.showinfo("ƒêƒÉng k√Ω th√†nh c√¥ng", "B·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.", parent=dialog)
            result["creds"] = {'username': username, 'password': password}
            dialog.destroy()

        reg_btn = tk.Button(
            frm, text="ƒêƒÉng k√Ω",
            font=("Segoe UI", 12, "bold"),
            bg="#2e8fff", fg="#fff",
            activebackground="#1e6fdc", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=submit_reg
        )
        reg_btn.pack(fill='x', padx=64, pady=(12, 8), ipady=4)

        # ƒê·∫£m b·∫£o n√∫t quay l·∫°i lu√¥n hi·ªÉn th·ªã: ƒë·∫∑t ri√™ng m·ªôt frame ·ªü d∆∞·ªõi c√πng
        bottom_frame = tk.Frame(frm, bg="#23272f")
        bottom_frame.pack(side=tk.BOTTOM, fill='x', padx=0, pady=(0, 8))
        back_btn = tk.Button(
            bottom_frame, text="Quay l·∫°i",
            font=("Segoe UI", 12, "bold"),
            bg="#23272f", fg="#b0b6c2",
            activebackground="#31343c", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=lambda: dialog.destroy(),
            highlightthickness=1, highlightbackground="#bdbdbd"
        )
        back_btn.pack(fill='x', padx=64, ipady=4)
        back_btn.update_idletasks()
        back_btn.configure(
            highlightthickness=2,
            highlightbackground="#bdbdbd",
            highlightcolor="#bdbdbd"
        )

        def close():
            result["creds"] = "back"
            dialog.destroy()
        dialog.protocol("WM_DELETE_WINDOW", close)
        reg_username_entry.focus_set()
        reg_username_entry.bind('<Return>', lambda e: reg_password_entry.focus_set())
        reg_password_entry.bind('<Return>', lambda e: reg_confirm_password_entry.focus_set())
        reg_confirm_password_entry.bind('<Return>', lambda e: submit_reg())
        dialog.deiconify()
        dialog.lift()  # ƒê·∫£m b·∫£o c·ª≠a s·ªï hi·ªán l√™n tr√™n c√πng
        dialog.grab_set()
        dialog.focus_force()
        dialog.wait_window()
        return result["creds"]

    def _set_dialog_appearance(self, dialog, width=480, height=320, title=""):
        dialog.title(title)
        dialog.configure(bg="#23272f")
        # Th√™m hi·ªáu ·ª©ng fade-in m∆∞·ª£t m√† cho dialog
        try:
            dialog.attributes('-alpha', 0.0)
        except Exception:
            pass
        self._center_dialog(dialog, width, height)
        dialog.update_idletasks()
        # Fade-in hi·ªáu ·ª©ng
        try:
            for i in range(0, 21):
                alpha = i / 20.0
                dialog.attributes('-alpha', alpha)
                dialog.update()
                dialog.after(8)
        except Exception:
            pass
        # KH√îNG d√πng overrideredirect, KH√îNG custom border ƒë·ªÉ c·ª≠a s·ªï n√©t, c√≥ titlebar chu·∫©n

    def _fade_in(self, dialog, duration=180):
        # Kh√¥ng d√πng hi·ªáu ·ª©ng fade-in ƒë·ªÉ tr√°nh nh·∫•p nh√°y ho·∫∑c load ch·∫≠m
        pass

    def launch(self):
        parent = self.root
        while True:
            mode = self._show_mode_dialog(parent)
            if mode is None:
                return None
            if mode == 'register':
                reg_result = self._show_register_dialog(parent)
                if reg_result == "back" or reg_result is None:
                    continue
                # ...existing code...
            elif mode == 'login':
                while True:
                    login_result = self._show_login_dialog(parent)
                    if login_result == "back":
                        break
                    creds = login_result
                    if creds:
                        user = self.user_manager.authenticate(creds['username'], creds['password'])
                        if user:
                            return user
                        else:
                            messagebox.showerror("L·ªói", "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.", parent=parent)
                            continue
                    else:
                        break
            elif mode == 'quit':
                return None

# --- auth_controller.py ---

class AuthController:
    def __init__(self, root, user_manager):
        self.root = root
        self.user_manager = user_manager
        self._remembered = {}
        self._dialog_zoomed = False

    def _set_dialog_appearance(self, dialog, width=480, height=320, title=""):
        dialog.title(title)
        dialog.configure(bg="#23272f")
        # Th√™m hi·ªáu ·ª©ng fade-in m∆∞·ª£t m√† cho dialog
        try:
            dialog.attributes('-alpha', 0.0)
        except Exception:
            pass
        self._center_dialog(dialog, width, height)
        dialog.update_idletasks()
        # Fade-in hi·ªáu ·ª©ng
        try:
            for i in range(0, 21):
                alpha = i / 20.0
                dialog.attributes('-alpha', alpha)
                dialog.update()
                dialog.after(8)
        except Exception:
            pass
        # KH√îNG d√πng overrideredirect, KH√îNG custom border ƒë·ªÉ c·ª≠a s·ªï n√©t, c√≥ titlebar chu·∫©n

    def _show_mode_dialog(self, parent):
        dialog_width = 540
        dialog_height = 420
        dialog = tk.Toplevel(parent)
        dialog.withdraw()
        self._set_dialog_appearance(dialog, width=dialog_width, height=dialog_height, title="Ch√†o m·ª´ng!")
        dialog.configure(bg="#23272f")
        # Cho ph√©p thu nh·ªè (minimize) v√† gi·ªØ n√∫t minimize tr√™n titlebar
        dialog.resizable(False, False)
        dialog.transient(parent)
        dialog.focus_force()
        dialog.lift()
        dialog.grab_set()
        # ƒê·∫£m b·∫£o c·ª≠a s·ªï c√≥ n√∫t minimize tr√™n m·ªçi Windows
        try:
            dialog.overrideredirect(False)
        except Exception:
            pass

        frm = tk.Frame(dialog, bg="#23272f")
        frm.place(relx=0.5, rely=0.5, anchor='center', width=dialog_width-40, height=dialog_height-40)

        # Logo + t√™n app + ch√†o m·ª´ng (CƒÇN GI·ªÆA)
        try:
            logo_path = os.path.join(os.path.dirname(__file__), "data", "icon.png")
            logo_img = Image.open(logo_path).resize((48, 48))
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frm, image=logo_photo, bg="#23272f")
            logo_label.image = logo_photo
            logo_label.pack(pady=(24, 8))
        except Exception:
            tk.Label(frm, text="üéÆ", font=("Segoe UI", 32), bg="#23272f", fg="#fff").pack(pady=(24, 8))
        tk.Label(frm, text="GAME COLLECTION", font=("Segoe UI", 16, "bold"), bg="#23272f", fg="#fff", anchor="center", justify="center").pack(pady=(0, 4), fill='x')
        tk.Label(
            frm,
            text="Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi ·ª©ng d·ª•ng qu·∫£n l√Ω game c√° nh√¢n!",
            font=("Segoe UI", 11),
            bg="#23272f",
            fg="#b0b6c2",
            anchor="center",
            justify="center"
        ).pack(pady=(2, 18), fill='x')

        # N√∫t ch·ªçn ch·∫ø ƒë·ªô (CƒÇN GI·ªÆA)
        btn_style = {"font": ("Segoe UI", 12, "bold"), "bg": "#2196f3", "fg": "#fff", "activebackground": "#1976d2", "activeforeground": "#fff", "bd": 0, "relief": "flat", "cursor": "hand2", "height": 1}
        def make_btn(text, command):
            btn = tk.Button(frm, text=text, command=command, **btn_style)
            btn.pack(fill='x', padx=64, pady=7, ipady=4)
            btn.bind("<Enter>", lambda e: btn.config(bg="#1976d2"))
            btn.bind("<Leave>", lambda e: btn.config(bg="#2196f3"))
            return btn

        result = {"mode": None}
        def set_mode_and_close(m):
            result["mode"] = m
            dialog.destroy()

        make_btn("ƒêƒÉng nh·∫≠p", lambda: set_mode_and_close("login"))
        make_btn("ƒêƒÉng k√Ω", lambda: set_mode_and_close("register"))
        tk.Button(frm, text="Tho√°t", command=lambda: set_mode_and_close("quit"),
                  font=("Segoe UI", 11, "bold"), bg="#bdbdbd", fg="#222", activebackground="#888", activeforeground="#fff",
                  bd=0, relief="flat", cursor="hand2", height=1).pack(fill='x', padx=64, pady=(7, 16), ipady=4)

        def close():
            result["mode"] = None
            dialog.destroy()
        dialog.protocol("WM_DELETE_WINDOW", close)
        dialog.deiconify()
        dialog.lift()
        dialog.grab_set()
        dialog.focus_force()
        dialog.wait_window()
        return result["mode"]

    def _show_login_dialog(self, parent):
        dialog_width = 540
        dialog_height = 520
        dialog = tk.Toplevel(parent)
        dialog.withdraw()
        self._set_dialog_appearance(dialog, width=dialog_width, height=dialog_height, title="ƒêƒÉng nh·∫≠p")
        dialog.configure(bg="#23272f")
        dialog.resizable(False, False)
        dialog.transient(parent)
        dialog.focus_force()
        dialog.lift()
        dialog.grab_set()
        try:
            dialog.overrideredirect(False)
        except Exception:
            pass
        frm = tk.Frame(dialog, bg="#23272f")
        frm.place(relx=0.5, rely=0.5, anchor='center', width=dialog_width-40, height=dialog_height-40)

        # Logo + ti√™u ƒë·ªÅ (CƒÇN GI·ªÆA)
        try:
            logo_path = os.path.join(os.path.dirname(__file__), "data", "icon.png")
            logo_img = Image.open(logo_path).resize((48, 48))
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frm, image=logo_photo, bg="#23272f")
            logo_label.image = logo_photo
            logo_label.pack(pady=(24, 8))
        except Exception:
            tk.Label(frm, text="üéÆ", font=("Segoe UI", 32), bg="#23272f", fg="#fff").pack(pady=(24, 8))
        tk.Label(frm, text="ƒêƒÇNG NH·∫¨P", font=("Segoe UI", 15, "bold"), bg="#23272f", fg="#fff").pack(pady=(0, 2), fill='x')
        tk.Label(frm, text="ƒêƒÉng nh·∫≠p b·∫±ng t√†i kho·∫£n c·ªßa b·∫°n", font=("Segoe UI", 10), bg="#23272f", fg="#b0b6c2").pack(pady=(2, 18), fill='x')

        # Form (CƒÇN GI·ªÆA)
        tk.Label(frm, text="T√äN ƒêƒÇNG NH·∫¨P", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        username_var = tk.StringVar()
        username_entry = tk.Entry(frm, textvariable=username_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        username_entry.pack(fill='x', padx=64, pady=(0, 12), ipady=6)

        tk.Label(frm, text="M·∫¨T KH·∫®U", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        password_var = tk.StringVar()
        password_entry = tk.Entry(frm, textvariable=password_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", show="*", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        password_entry.pack(fill='x', padx=64, pady=(0, 6), ipady=6)

        # Hi·ªán/·∫©n m·∫≠t kh·∫©u & Ghi nh·ªõ t√¥i (cƒÉn ƒë·ªÅu nhau)
        checkbox_frame = tk.Frame(frm, bg="#23272f")
        checkbox_frame.pack(fill='x', padx=64, pady=(0, 8))
        show_pw_var = tk.BooleanVar(value=False)
        def toggle_pw():
            password_entry.config(show="" if show_pw_var.get() else "*")
        show_pw_cb = tk.Checkbutton(checkbox_frame, text="Hi·ªán m·∫≠t kh·∫©u", variable=show_pw_var, command=toggle_pw, bg="#23272f", fg="#b0b6c2", activebackground="#23272f", activeforeground="#4f8cff", selectcolor="#23262e", font=("Segoe UI", 10))
        show_pw_cb.pack(side=tk.LEFT, expand=True, anchor='center')
        remember_var = tk.BooleanVar(value=False)
        remember_cb = tk.Checkbutton(checkbox_frame, text="Ghi nh·ªõ t√¥i", variable=remember_var, bg="#23272f", fg="#b0b6c2", activebackground="#23272f", activeforeground="#4f8cff", selectcolor="#23262e", font=("Segoe UI", 10))
        remember_cb.pack(side=tk.LEFT, expand=True, anchor='center')

        REMEMBER_FILE = os.path.join(os.path.dirname(__file__), "data", "remembered.json")

        def load_remembered():
            if os.path.exists(REMEMBER_FILE):
                try:
                    with open(REMEMBER_FILE, "r", encoding="utf-8") as f:
                        self._remembered = json.load(f)
                except Exception:
                    self._remembered = {}
            else:
                self._remembered = {}

        def save_remembered():
            try:
                with open(REMEMBER_FILE, "w", encoding="utf-8") as f:
                    json.dump(self._remembered, f, ensure_ascii=False, indent=2)
            except Exception:
                pass

        load_remembered()

        def on_username_change(*args):
            uname = username_var.get()
            if uname in self._remembered:
                password_var.set(self._remembered[uname])
                remember_var.set(True)
            else:
                password_var.set("")
                remember_var.set(False)
        username_var.trace_add("write", lambda *a: on_username_change())

        popup_ref = {"popup": None}
        def show_remembered_popup(event):
            uname = username_var.get()
            if len(uname) < 2:
                if popup_ref["popup"]:
                    popup_ref["popup"].destroy()
                    popup_ref["popup"] = None
                return
            matches = [u for u in self._remembered if uname.lower() in u.lower()]
            if not matches:
                if popup_ref["popup"]:
                    popup_ref["popup"].destroy()
                    popup_ref["popup"] = None
                return
            if popup_ref["popup"]:
                popup_ref["popup"].destroy()
            popup = tk.Toplevel(dialog)
            popup_ref["popup"] = popup
            popup.wm_overrideredirect(True)
            popup.configure(bg="#31343c")
            x = dialog.winfo_rootx() + username_entry.winfo_x()
            y = dialog.winfo_rooty() + username_entry.winfo_y() + username_entry.winfo_height()
            popup.geometry(f"220x{min(120, 28*len(matches))}+{x}+{y}")

            def fill_and_close(u):
                username_var.set(u)
                password_var.set(self._remembered[u])
                remember_var.set(True)
                popup.destroy()
                popup_ref["popup"] = None
                password_entry.focus_set()

            for i, u in enumerate(matches):
                btn = tk.Button(popup, text=u, anchor="w", font=("Segoe UI", 11), bg="#31343c", fg="#fff", bd=0, relief="flat", activebackground="#4f8cff", activeforeground="#fff", cursor="hand2", command=lambda u=u: fill_and_close(u))
                btn.pack(fill='x')
            def close_popup(event=None):
                if popup.winfo_exists():
                    popup.destroy()
                    popup_ref["popup"] = None
            popup.bind("<FocusOut>", close_popup)
        username_entry.bind("<KeyRelease>", show_remembered_popup)

        def on_remember_change(*args):
            uname = username_var.get()
            if not remember_var.get() and uname in self._remembered:
                del self._remembered[uname]
                save_remembered()
        remember_var.trace_add("write", lambda *a: on_remember_change())

        result = {"creds": None, "retry": False}
        def submit(event=None):
            self._dialog_zoomed = dialog.state() == 'zoomed'
            if remember_var.get():
                self._remembered[username_var.get()] = password_var.get()
                save_remembered()
            else:
                uname = username_var.get()
                if uname in self._remembered:
                    del self._remembered[uname]
                    save_remembered()
            result["creds"] = {'username': username_var.get(), 'password': password_var.get()}
            dialog.destroy()
        def go_back():
            self._dialog_zoomed = dialog.state() == 'zoomed'
            result["creds"] = "back"
            dialog.destroy()

        login_btn = tk.Button(
            frm, text="ƒêƒÉng nh·∫≠p",
            font=("Segoe UI", 12, "bold"),
            bg="#2196f3", fg="#fff",
            activebackground="#1976d2", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=submit
        )
        login_btn.pack(fill='x', padx=64, pady=(12, 8), ipady=4)

        # N√∫t quay l·∫°i (th√™m d∆∞·ªõi n√∫t ƒëƒÉng nh·∫≠p)
        back_btn = tk.Button(
            frm, text="Quay l·∫°i",
            font=("Segoe UI", 12, "bold"),
            bg="#23272f", fg="#b0b6c2",
            activebackground="#31343c", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=go_back,
            highlightthickness=1, highlightbackground="#bdbdbd"
        )
        back_btn.pack(fill='x', padx=64, pady=(0, 16), ipady=4)
        back_btn.update_idletasks()
        back_btn.configure(
            highlightthickness=2,
            highlightbackground="#bdbdbd",
            highlightcolor="#bdbdbd"
        )

        def close():
            result["creds"] = "back"
            dialog.destroy()
        dialog.protocol("WM_DELETE_WINDOW", close)
        username_entry.focus_set()
        username_entry.bind('<Return>', lambda e: password_entry.focus_set())
        password_entry.bind('<Return>', lambda e: submit())
        dialog.deiconify()
        dialog.lift()
        dialog.grab_set()
        dialog.focus_force()
        dialog.wait_window()
        return result.get("creds", None)

    def _show_register_dialog(self, parent):
        dialog_width = 540
        dialog_height = 570
        dialog = tk.Toplevel(parent)
        dialog.withdraw()
        self._set_dialog_appearance(dialog, width=dialog_width, height=dialog_height, title="ƒêƒÉng k√Ω t√†i kho·∫£n")
        dialog.configure(bg="#23272f")
        dialog.resizable(False, False)
        dialog.transient(parent)
        dialog.focus_force()
        dialog.lift()
        dialog.grab_set()
        try:
            dialog.overrideredirect(False)
        except Exception:
            pass
        frm = tk.Frame(dialog, bg="#23272f")
        frm.place(relx=0.5, rely=0.5, anchor='center', width=dialog_width-40, height=dialog_height-40)

        # Logo + ti√™u ƒë·ªÅ (CƒÇN GI·ªÆA)
        try:
            logo_path = os.path.join(os.path.dirname(__file__), "data", "icon.png")
            logo_img = Image.open(logo_path).resize((48, 48))
            logo_photo = ImageTk.PhotoImage(logo_img)
            logo_label = tk.Label(frm, image=logo_photo, bg="#23272f")
            logo_label.image = logo_photo
            logo_label.pack(pady=(24, 8))
        except Exception:
            tk.Label(frm, text="üéÆ", font=("Segoe UI", 32), bg="#23272f", fg="#fff").pack(pady=(24, 8))
        tk.Label(frm, text="ƒêƒÇNG K√ù T√ÄI KHO·∫¢N", font=("Segoe UI", 15, "bold"), bg="#23272f", fg="#fff").pack(pady=(0, 2), fill='x')
        tk.Label(frm, text="T·∫°o t√†i kho·∫£n m·ªõi ƒë·ªÉ b·∫Øt ƒë·∫ßu qu·∫£n l√Ω game c·ªßa b·∫°n", font=("Segoe UI", 10), bg="#23272f", fg="#b0b6c2").pack(pady=(2, 18), fill='x')

        # Form ƒëƒÉng k√Ω (CƒÇN GI·ªÆA)
        tk.Label(frm, text="T√äN ƒêƒÇNG NH·∫¨P", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        reg_username_var = StringVar()
        reg_username_entry = tk.Entry(frm, textvariable=reg_username_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        reg_username_entry.pack(fill='x', padx=64, pady=(0, 12), ipady=6)

        tk.Label(frm, text="M·∫¨T KH·∫®U", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        reg_password_var = StringVar()
        reg_password_entry = tk.Entry(frm, textvariable=reg_password_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", show="*", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        reg_password_entry.pack(fill='x', padx=64, pady=(0, 6), ipady=6)

        tk.Label(frm, text="X√ÅC NH·∫¨N M·∫¨T KH·∫®U", font=("Segoe UI", 10, "bold"), bg="#23272f", fg="#b0b6c2", anchor='center').pack(anchor='center', padx=48, pady=(0, 2))
        reg_confirm_password_var = StringVar()
        reg_confirm_password_entry = tk.Entry(frm, textvariable=reg_confirm_password_var, font=("Segoe UI", 12), bg="#23262e", fg="#fff", show="*", insertbackground="#4f8cff", relief="flat", highlightthickness=1, highlightbackground="#31343c", highlightcolor="#4f8cff", justify='center')
        reg_confirm_password_entry.pack(fill='x', padx=64, pady=(0, 12), ipady=6)

        # Hi·ªán/·∫©n m·∫≠t kh·∫©u
        show_reg_pw_var = tk.BooleanVar(value=False)
        def toggle_reg_pw():
            reg_password_entry.config(show="" if show_reg_pw_var.get() else "*")
            reg_confirm_password_entry.config(show="" if show_reg_pw_var.get() else "*")
        show_reg_pw_cb = tk.Checkbutton(frm, text="Hi·ªán m·∫≠t kh·∫©u", variable=show_reg_pw_var, command=toggle_reg_pw, bg="#23272f", fg="#b0b6c2", activebackground="#23272f", activeforeground="#4f8cff", selectcolor="#23262e", font=("Segoe UI", 10))
        show_reg_pw_cb.pack(anchor='center', padx=64, pady=(0, 0))

        # N√∫t ƒëƒÉng k√Ω
        result = {"creds": None}
        def submit_reg(event=None):
            username = reg_username_var.get().strip()
            password = reg_password_var.get()
            confirm_password = reg_confirm_password_var.get()
            if not username or not password or not confirm_password:
                messagebox.showwarning("Thi·∫øu th√¥ng tin", "Vui l√≤ng ƒëi·ªÅn ƒë·∫ßy ƒë·ªß th√¥ng tin ƒëƒÉng k√Ω.", parent=dialog)
                return
            if password != confirm_password:
                messagebox.showwarning("M·∫≠t kh·∫©u kh√¥ng kh·ªõp", "Vui l√≤ng x√°c nh·∫≠n ƒë√∫ng m·∫≠t kh·∫©u.", parent=dialog)
                return
            if len(username) < 3 or not username.isalnum():
                messagebox.showwarning("T√™n ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá", "T√™n ƒëƒÉng nh·∫≠p ph·∫£i c√≥ √≠t nh·∫•t 3 k√Ω t·ª± v√† kh√¥ng ch·ª©a k√Ω t·ª± ƒë·∫∑c bi·ªát.", parent=dialog)
                return
            if not self.user_manager.register_user(username, password, role="user"):
                messagebox.showwarning("T√™n ƒëƒÉng nh·∫≠p ƒë√£ t·ªìn t·∫°i", "Vui l√≤ng ch·ªçn t√™n ƒëƒÉng nh·∫≠p kh√°c.", parent=dialog)
                return
            messagebox.showinfo("ƒêƒÉng k√Ω th√†nh c√¥ng", "B·∫°n ƒë√£ ƒëƒÉng k√Ω t√†i kho·∫£n th√†nh c√¥ng! B·∫°n c√≥ th·ªÉ ƒëƒÉng nh·∫≠p ngay b√¢y gi·ªù.", parent=dialog)
            result["creds"] = {'username': username, 'password': password}
            dialog.destroy()

        reg_btn = tk.Button(
            frm, text="ƒêƒÉng k√Ω",
            font=("Segoe UI", 12, "bold"),
            bg="#2e8fff", fg="#fff",
            activebackground="#1e6fdc", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=submit_reg
        )
        reg_btn.pack(fill='x', padx=64, pady=(12, 8), ipady=4)

        # ƒê·∫£m b·∫£o n√∫t quay l·∫°i lu√¥n hi·ªÉn th·ªã: ƒë·∫∑t ri√™ng m·ªôt frame ·ªü d∆∞·ªõi c√πng
        bottom_frame = tk.Frame(frm, bg="#23272f")
        bottom_frame.pack(side=tk.BOTTOM, fill='x', padx=0, pady=(0, 8))
        back_btn = tk.Button(
            bottom_frame, text="Quay l·∫°i",
            font=("Segoe UI", 12, "bold"),
            bg="#23272f", fg="#b0b6c2",
            activebackground="#31343c", activeforeground="#fff",
            bd=0, relief="flat", cursor="hand2", height=1,
            command=lambda: dialog.destroy(),
            highlightthickness=1, highlightbackground="#bdbdbd"
        )
        back_btn.pack(fill='x', padx=64, ipady=4)
        back_btn.update_idletasks()
        back_btn.configure(
            highlightthickness=2,
            highlightbackground="#bdbdbd",
            highlightcolor="#bdbdbd"
        )

        def close():
            result["creds"] = "back"
            dialog.destroy()
        dialog.protocol("WM_DELETE_WINDOW", close)
        reg_username_entry.focus_set()
        reg_username_entry.bind('<Return>', lambda e: reg_password_entry.focus_set())
        reg_password_entry.bind('<Return>', lambda e: reg_confirm_password_entry.focus_set())
        reg_confirm_password_entry.bind('<Return>', lambda e: submit_reg())
        dialog.deiconify()
        dialog.lift()  # ƒê·∫£m b·∫£o c·ª≠a s·ªï hi·ªán l√™n tr√™n c√πng
        dialog.grab_set()
        dialog.focus_force()
        dialog.wait_window()
        return result["creds"]

    def _center_dialog(self, dialog, width=480, height=320):
        dialog.update_idletasks()
        screen_width = dialog.winfo_screenwidth()
        screen_height = dialog.winfo_screenheight()
        x = (screen_width // 2) - (width // 2)
        y = (screen_height // 2) - (height // 2)
        dialog.geometry(f"{width}x{height}+{x}+{y}")

    def _fade_in(self, dialog, duration=180):
        # Kh√¥ng d√πng hi·ªáu ·ª©ng fade-in ƒë·ªÉ tr√°nh nh·∫•p nh√°y ho·∫∑c load ch·∫≠m
        pass

    def launch(self):
        parent = self.root
        while True:
            mode = self._show_mode_dialog(parent)
            if mode is None:
                return None
            if mode == 'register':
                reg_result = self._show_register_dialog(parent)
                if reg_result == "back" or reg_result is None:
                    continue
                # ...existing code...
            elif mode == 'login':
                while True:
                    login_result = self._show_login_dialog(parent)
                    if login_result == "back":
                        break
                    creds = login_result
                    if creds:
                        user = self.user_manager.authenticate(creds['username'], creds['password'])
                        if user:
                            return user
                        else:
                            messagebox.showerror("L·ªói", "Sai t√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u.", parent=parent)
                            continue
                    else:
                        break
            elif mode == 'quit':
                return None

# --- giantbomb_client.py ---

class GiantBombClient:
    BASE_URL = 'https://www.giantbomb.com/api'
    DEFAULT_API_KEY = '30382badcce6403d0e4329e8df393a72d6366c47'

    def __init__(self, api_key=None):
        self.api_key = api_key or os.getenv('GIANTBOMB_API_KEY') or self.DEFAULT_API_KEY
        self.session = requests.Session()
        self._search_cache = {}
        self._details_cache = {}

    def search_games(self, query, limit=50):
        cache_key = (query.lower(), limit)
        if cache_key in self._search_cache:
            return self._search_cache[cache_key]

        params = {
            'api_key': self.api_key,
            'format': 'json',
            'query': query,
            'resources': 'game',
            'limit': limit
        }
        headers = {'User-Agent': 'GameCollectionApp'}
        try:
            resp = self.session.get(f"{self.BASE_URL}/search/", params=params, headers=headers, timeout=10)
            data = resp.json()
        except Exception as e:
            raise RuntimeError(f"L·ªói khi truy v·∫•n API t√¨m ki·∫øm: {e}")

        if data.get('status_code') != 1:
            raise RuntimeError(f"L·ªói API GiantBomb: {data.get('error')}")

        results = data.get('results', [])
        self._search_cache[cache_key] = results
        return results

    def get_game_details(self, guid):
        if guid in self._details_cache:
            return self._details_cache[guid]

        params = {
            'api_key': self.api_key,
            'format': 'json',
            'field_list': 'name,deck,developers,genres,platforms,aliases,image,original_release_date,site_detail_url'
        }
        headers = {'User-Agent': 'GameCollectionApp'}
        url = f"{self.BASE_URL}/game/{guid}/"
        try:
            resp = self.session.get(url, params=params, headers=headers, timeout=10)
            data = resp.json()
        except Exception as e:
            raise RuntimeError(f"L·ªói khi truy v·∫•n chi ti·∫øt game: {e}")

        if data.get('status_code') != 1:
            raise RuntimeError(f"API error: {data.get('error')}")

        result = data.get('results')
        self._details_cache[guid] = result
        return result

# S·ª≠ d·ª•ng threading t·∫£i ·∫£nh b√¨a
from PIL import Image, ImageTk
import urllib.request
import io

def load_image_async(url, label):
    def task():
        try:
            label.config(text="ƒêang t·∫£i ·∫£nh...")
            with urllib.request.urlopen(url) as u:
                raw_data = u.read()
            im = Image.open(io.BytesIO(raw_data))
            im = im.resize((200, 270))
            photo = ImageTk.PhotoImage(im)
            label.config(image=photo, text='')
            label.image = photo
        except Exception as e:
            label.config(image='', text='Kh√¥ng t·∫£i ƒë∆∞·ª£c ·∫£nh')
            label.image = None

    threading.Thread(target=task, daemon=True).start()

# ƒê·∫£m b·∫£o c√°c class AuthController v√† GameApp ƒë∆∞·ª£c ƒë·ªãnh nghƒ©a tr∆∞·ªõc khi s·ª≠ d·ª•ng
# Kh√¥ng c√≥ l·ªánh import ho·∫∑c ƒë·ªãnh nghƒ©a n√†o b·ªã l·ªói ho·∫∑c b·ªã l·ªìng nhau

# ƒê·∫£m b·∫£o KH√îNG c√≥ d√≤ng n√†o nh∆∞:
# if __name__ == '__main__': ho·∫∑c c√°c l·ªánh ch·∫°y th·ª≠ ·ªü cu·ªëi file n√†y